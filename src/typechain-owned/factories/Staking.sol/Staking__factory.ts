/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Staking, StakingInterface } from "../../Staking.sol/Staking";
import type { PromiseOrValue } from "../../common";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "Claimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "stakeId",
        type: "uint256",
      },
    ],
    name: "NewStake",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "stakinger",
        type: "address",
      },
    ],
    name: "NewStaking",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "stakeId",
        type: "uint256",
      },
    ],
    name: "UpdatedStake",
    type: "event",
  },
  {
    inputs: [],
    name: "WAITING_TIME_CLAIM",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_duration",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_apy",
        type: "uint256",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "earned",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "pendingReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenStaking",
        type: "address",
      },
    ],
    name: "setTokenStaking",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stakeId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "stakes",
    outputs: [
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "apy",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenStaking",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalUserStake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_duration",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_apy",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "updateStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "userStakes",
    outputs: [
      {
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "stakeId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "claimTime",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "claimed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610f9b380380610f9b83398101604081905261002f916100b1565b61003833610061565b60018055600280546001600160a01b0319166001600160a01b03929092169190911790556100e1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100c357600080fd5b81516001600160a01b03811681146100da57600080fd5b9392505050565b610eab806100f06000396000f3fe608060405234801561001057600080fd5b50600436106101205760003560e01c806381b9da62116100ad578063d1658d7f11610071578063d1658d7f146102b5578063d5a44f86146102be578063eae23994146102fa578063f2fde38b1461030d578063fd2b52021461032057600080fd5b806381b9da62146101f75780638b0e9f3f1461020a5780638da5cb5b146102135780639239a75014610224578063bbab7217146102ad57600080fd5b80633ccfd60b116100f45780633ccfd60b1461018957806370a0823114610191578063715018a6146101b15780637b0472f0146101b95780637dc30ede146101cc57600080fd5b80628cc2621461012557806312f7086c1461015857806318160ddd1461016b578063379607f514610174575b600080fd5b610145610133366004610ce6565b60076020526000908152604090205481565b6040519081526020015b60405180910390f35b610145610166366004610d16565b610333565b61014560085481565b610187610182366004610d16565b610436565b005b6101876107cb565b61014561019f366004610ce6565b60096020526000908152604090205481565b6101876108b6565b6101876101c7366004610d2f565b6108ca565b6002546101df906001600160a01b031681565b6040516001600160a01b03909116815260200161014f565b610187610205366004610d51565b610a5f565b61014560035481565b6000546001600160a01b03166101df565b610274610232366004610d16565b6006602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b039094169492939192909160ff1686565b604080516001600160a01b03909716875260208701959095529385019290925260608401526080830152151560a082015260c00161014f565b610145607881565b61014560055481565b6102e56102cc366004610d16565b6004602052600090815260409020805460019091015482565b6040805192835260208301919091520161014f565b610187610308366004610ce6565b610ac5565b61018761031b366004610ce6565b610aef565b61018761032e366004610d2f565b610b68565b6000818152600660209081526040808320815160c08101835281546001600160a01b0316815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015460ff1615801560a08301526103a15750600092915050565b60208082015160009081526004825260408082208151808301909252805480835260019091015493820193909352606084015190926103df91610d93565b42106103ec5781516103fb565b60608301516103fb9042610dac565b90506502de4135300081836020015185604001516104199190610dbf565b6104239190610dbf565b61042d9190610dd6565b95945050505050565b8060055481106104615760405162461bcd60e51b815260040161045890610df8565b60405180910390fd5b610469610bc2565b610471610c1b565b600082815260066020908152604091829020825160c08101845281546001600160a01b031680825260018301549382019390935260028201549381019390935260038101546060840152600481015460808401526005015460ff16151560a083015233919082146105135760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b6044820152606401610458565b602080820151600090815260048252604090819020815180830190925280548252600101549181019190915260a0820151156105845760405162461bcd60e51b815260206004820152601060248201526f14dd185ad9481a5cc818db185a5b595960821b6044820152606401610458565b60008581526006602052604081206004015490036106aa57805160608301516105ad9190610d93565b4210156105d6576105bf607842610d93565b6000868152600660205260409020600401556107bb565b60006105e186610333565b83604001516105f09190610d93565b60025460405163a9059cbb60e01b81526001600160a01b0387811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af1158015610645573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106699190610e21565b61067257600080fd5b600160a084015260405186907f7a355715549cfe7c1cba26304350343fbddc4b4f72d3ce3e7c27117dd20b5cb890600090a2506107bb565b6000858152600660205260409020600401544210156107035760405162461bcd60e51b81526020600482015260156024820152744e6f742074696d6520746f2063616e20636c61696d60581b6044820152606401610458565b600254604083810151905163a9059cbb60e01b81526001600160a01b038681166004830152602482019290925291169063a9059cbb906044016020604051808303816000875af115801561075b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f9190610e21565b61078857600080fd5b600160a083015260405185907f7a355715549cfe7c1cba26304350343fbddc4b4f72d3ce3e7c27117dd20b5cb890600090a25b5050506107c760018055565b5050565b6107d3610c1b565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561081c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108409190610e43565b60025460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c79190610e21565b6108be610c1b565b6108c86000610c75565b565b8160035481106108ec5760405162461bcd60e51b815260040161045890610df8565b33826109275760405162461bcd60e51b815260206004820152600a6024820152690616d6f756e74203d20360b41b6044820152606401610458565b6002546040516323b872dd60e01b81526001600160a01b03838116600483015230602483015260448201869052909116906323b872dd906064016020604051808303816000875af1158015610980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a49190610e21565b6109ad57600080fd5b6005805460009081526006602052604080822080546001600160a01b0319166001600160a01b038616908117909155835483528183206001018890558354835281832060020187905583548352818320426003909101559254905190917f5de017f2f649dce62f5bd496458cbbb75982a3dc78176fa154a31581cacdd6b291a360058054906000610a3d83610e5c565b91905055508260086000828254610a549190610d93565b909155505050505050565b610a67610c1b565b806003548110610a895760405162461bcd60e51b815260040161045890610df8565b610a94848484610cc5565b60405182907f23b60b45372608c224839b95b862c17aaa397bb38a45c8341a51e41916b3aed690600090a250505050565b610acd610c1b565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b610af7610c1b565b6001600160a01b038116610b5c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610458565b610b6581610c75565b50565b610b70610c1b565b610b7d8282600354610cc5565b6003546040517f9193436894c1e220c236b0df5dd44eb674082159bf8dfacdba8b79270ced9e6990600090a260038054906000610bb983610e5c565b91905055505050565b600260015403610c145760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610458565b6002600155565b6000546001600160a01b031633146108c85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610458565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610ccd610c1b565b6000908152600460205260409020918255600190910155565b600060208284031215610cf857600080fd5b81356001600160a01b0381168114610d0f57600080fd5b9392505050565b600060208284031215610d2857600080fd5b5035919050565b60008060408385031215610d4257600080fd5b50508035926020909101359150565b600080600060608486031215610d6657600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610da657610da6610d7d565b92915050565b81810381811115610da657610da6610d7d565b8082028115828204841417610da657610da6610d7d565b600082610df357634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600f908201526e125b9d985b1a59081cdd185ad95259608a1b604082015260600190565b600060208284031215610e3357600080fd5b81518015158114610d0f57600080fd5b600060208284031215610e5557600080fd5b5051919050565b600060018201610e6e57610e6e610d7d565b506001019056fea2646970667358221220fe5ff4715ed1e0e19a22d9835d1c178ea118422ab3bf9f3469cc30dd1f5df65864736f6c63430008110033";

type StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staking__factory extends ContractFactory {
  constructor(...args: StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _stakingToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Staking> {
    return super.deploy(_stakingToken, overrides || {}) as Promise<Staking>;
  }
  override getDeployTransaction(
    _stakingToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_stakingToken, overrides || {});
  }
  override attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  override connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
